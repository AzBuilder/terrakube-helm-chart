{{- if .Values.api.enabled -}}
apiVersion: v1
kind: Secret
metadata:
  name: terrakube-api-secrets
type: Opaque
stringData:
  GroupValidationType: 'DEX'
  UserValidationType: 'DEX'
  AuthenticationValidationType: 'DEX'
  PatSecret: '{{ .Values.security.patSecret | b64enc }}'
  InternalSecret: '{{ .Values.security.internalSecret | b64enc }}'
  DexIssuerUri: '{{ .Values.dex.config.issuer }}'
  DexClientId: '{{ .Values.security.dexClientId }}'
  TerrakubeHostname: '{{ .Values.ingress.api.domain }}'
  AzBuilderExecutorUrl: 'http://terrakube-executor-service:8090/api/v1/terraform-rs'
  TerrakubeUiURL: '{{- if .Values.ingress.useTls }}https{{else}}http{{ end }}://{{ .Values.ingress.ui.domain }}'
  TERRAKUBE_ADMIN_GROUP: '{{ .Values.security.adminGroup }}'

  {{- if .Values.storage.defaultStorage -}}

  #AWS S3 Storage
  StorageType: 'AWS'
  AwsStorageAccessKey: '{{ .Values.minio.auth.rootUser }}'
  AwsStorageSecretKey: '{{ .Values.minio.auth.rootPassword }}'
  AwsStorageBucketName: '{{ .Values.minio.defaultBuckets }}'
  AwsStorageRegion: '{{ .Values.storage.default.region }}'
  AwsEndpoint: '{{ .Values.storage.default.endpoint }}'

  {{ else }}

  {{- if and (.Values.storage.azure).storageAccountName (.Values.storage.azure).storageAccountAccessKey }}
  #Azure Storage
  StorageType: 'AZURE'
  AzureAccountName: '{{ .Values.storage.azure.storageAccountName }}'
  AzureAccountKey: '{{ .Values.storage.azure.storageAccountAccessKey }}'
  {{- end }}
  
  {{- if and (.Values.storage.aws).bucketName (.Values.storage.aws).accessKey (.Values.storage.aws).secretKey (.Values.storage.aws).region  }}
  #AWS S3 Storage
  StorageType: 'AWS'
  AwsStorageAccessKey: '{{ .Values.storage.aws.accessKey }}'
  AwsStorageSecretKey: '{{ .Values.storage.aws.secretKey }}'
  AwsStorageBucketName: '{{ .Values.storage.aws.bucketName }}'
  AwsStorageRegion: '{{ .Values.storage.aws.region }}'
  AwsEndpoint: ''
  {{- end }}

  {{- if and (.Values.storage.minio).bucketName (.Values.storage.minio).accessKey (.Values.storage.minio).secretKey (.Values.storage.minio).endpoint  }}
  #MINIO S3 Storage
  StorageType: 'AWS'
  AwsStorageAccessKey: '{{ .Values.storage.minio.accessKey }}'
  AwsStorageSecretKey: '{{ .Values.storage.minio.secretKey }}'
  AwsStorageBucketName: '{{ .Values.storage.minio.bucketName }}'
  AwsStorageRegion: 'us-east-1' # THIS IS NEEDED IN ORDER TO CONNECT TO MINIO USING THE AWS CODE, HARD CODED IT HAS NO EFFECT
  AwsEndpoint: '{{ .Values.storage.minio.endpoint }}'
  {{- end }}

  {{- if and (.Values.storage.gcp).projectId (.Values.storage.gcp).bucketName (.Values.storage.gcp).credentials  }}
  #GCP Storage Bucket
  StorageType: 'GCP'
  GcpStorageProjectId: '{{ .Values.storage.gcp.projectId }}'
  GcpStorageBucketName: '{{ .Values.storage.gcp.bucketName }}'
  GcpStorageCredentialsBase64: {{ .Values.storage.gcp.credentials | b64enc }}
  {{- end }}

  {{- end }}
  
  {{- if .Values.api.defaultDatabase -}}
  #Checking default database options
  DatasourceHostname: '{{ .Release.Name }}-postgresql'
  DatasourceDatabase: '{{ .Values.postgresql.auth.database }}'
  DatasourceUser: '{{ .Values.postgresql.auth.username}}'
  DatasourcePassword: '{{ .Values.postgresql.auth.password }}'
  ApiDataSourceType: 'POSTGRESQL'
  {{ else }}
  ApiDataSourceType: '{{ .Values.api.properties.databaseType }}'
  DatasourceHostname: '{{ .Values.api.properties.databaseHostname }}'
  DatasourceDatabase: '{{ .Values.api.properties.databaseName }}'
  DatasourceUser: '{{ .Values.api.properties.databaseUser }}'
  DatasourcePassword: '{{ .Values.api.properties.databasePassword }}' 
  {{- end }}  


  {{- if .Values.api.loadSampleData -}}
  #Checking if we need to load the default data for testing
  spring_profiles_active: 'demo'
  {{- end }}  

  #Custom terraform releases url
  CustomTerraformReleasesUrl : '{{ .Values.api.terraformReleasesUrl }}' 

{{ end }}