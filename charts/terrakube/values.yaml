## Global Name
name: "terrakube"

## Azure Active Directory Security
security:
  useOpenLDAP: true
  adminGroup: "TERRAKUBE_ADMIN"
  patSecret: "bAUaAojZP3XhkuE2rWBtR3gRAHPzQKkx"
  internalSecret: "AxxPdgpCi72f8WhMXCTGhtfMRp6AuBfj"
  dexClientId: "example-app"
  dexClientScope: "email openid profile offline_access groups"
  dexIssuerUri: "http://terrakube-api.minikube.net/dex"


## Dex
dex:
  enabled: true
  config:
    issuer: http://terrakube-api.minikube.net/dex

    storage:
      type: memory
    web:
      http: 0.0.0.0:5556
      allowedOrigins: ['*']
      skipApprovalScreen: true
    oauth2:
      responseTypes: ["code", "token", "id_token"] 

    connectors:
    - type: ldap
      name: OpenLDAP
      id: ldap
      config:
        # The following configurations seem to work with OpenLDAP:
        #
        # 1) Plain LDAP, without TLS:
        host: terrakube-openldap-service:1389
        insecureNoSSL: true
        #
        # 2) LDAPS without certificate validation:
        #host: localhost:636
        #insecureNoSSL: false
        #insecureSkipVerify: true
        #
        # 3) LDAPS with certificate validation:
        #host: YOUR-HOSTNAME:636
        #insecureNoSSL: false
        #insecureSkipVerify: false
        #rootCAData: 'CERT'
        # ...where CERT="$( base64 -w 0 your-cert.crt )"

        # This would normally be a read-only user.
        bindDN: cn=admin,dc=example,dc=org
        bindPW: admin

        usernamePrompt: Email Address

        userSearch:
          baseDN: ou=users,dc=example,dc=org
          filter: "(objectClass=person)"
          username: mail
          # "DN" (case sensitive) is a special attribute name. It indicates that
          # this value should be taken from the entity's DN not an attribute on
          # the entity.
          idAttr: DN
          emailAttr: mail
          nameAttr: cn

        groupSearch:
          baseDN: ou=Groups,dc=example,dc=org
          filter: "(objectClass=groupOfNames)"

          userMatchers:
            # A user is a member of a group when their DN matches
            # the value of a "member" attribute on the group entity.
          - userAttr: DN
            groupAttr: member

          # The group name should be the "cn" value.
          nameAttr: cn

    staticClients:
    - id: example-app
      redirectURIs:
      - 'http://terrakube-ui.minikube.net'
      - '/device/callback'
      - 'http://localhost:10000/login'
      - 'http://localhost:10001/login'
      name: 'example-app'
      public: true
  volumes:
  - name: gcp-credentials
    secret:
      secretName: terrakube-dex-secrets
      items:
      - key: "gcp-credentials"
        path: "gcp-credentials"
  volumeMount:
  - name: gcp-credentials
    mountPath: /etc/gcp/secret
    readOnly: true

    


## Terraform Storage
storage:
  defaultStorage: true
  azure:
    storageAccountName: ""
    storageAccountResourceGroup: ""
    storageAccountAccessKey: ""
  aws:
    accessKey: ""
    secretKey: ""
    bucketName: ""
    region: ""
  minio:
    accessKey: ""
    secretKey: ""
    bucketName: ""
    endpoint: ""
  gcp:
    projectId: ""
    bucketName: ""
    credentials: ""
  default:
    region: "us-east-1"
    endpoint: "http://terrakube-minio:9000"


# Default Storage Minio Configuration
minio:
  auth:
    rootUser: "admin"
    rootPassword: "superadmin"
  defaultBuckets: "terrakube"

# Default Database Postgresql
postgresql:
  auth:
    username: "terrakube"
    password: "terrakubepassword"
    database: "terrakube"

## API properties
api:
  enabled: true
  version: ""
  replicaCount: "1"
  serviceType: "ClusterIP"
  resources: {}
  defaultDatabase: true
  loadSampleData: true
  terraformReleasesUrl: "https://releases.hashicorp.com/terraform/index.json"
  properties:
    databaseType: "POSTGRESQL"
    databaseHostname: ""
    databaseName: ""
    databaseUser: ""
    databasePassword: ""

## Executor properties
executor:
  enabled: true
  version: ""
  replicaCount: "1"
  serviceType: "ClusterIP"
  resources: {}
  properties:
    toolsRepository: "https://github.com/AzBuilder/terrakube-extensions"
    toolsBranch: "main"

## Registry properties
registry:
  enabled: true
  version: ""
  replicaCount: "1"
  serviceType: "ClusterIP"
  resources: {}

## UI Properties
ui:
  enabled: true
  version: ""
  replicaCount: "1"
  serviceType: "ClusterIP"
  resources: {}

## Ingress properties
ingress:
  useTls: false
  ui:
    enabled: true
    domain: "terrakube-ui.minikube.net"
    path: "/(.*)"
    pathType: "Prefix" 
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/use-regex: "true"
  api:
    enabled: true
    domain: "terrakube-api.minikube.net"
    path: "/(.*)"
    pathType: "Prefix"
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/use-regex: "true"
      nginx.ingress.kubernetes.io/configuration-snippet: "proxy_set_header Authorization $http_authorization;"
  registry:
    enabled: true
    domain: "terrakube-reg.minikube.net"
    path: "/(.*)"
    pathType: "Prefix"
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/use-regex: "true"
      nginx.ingress.kubernetes.io/configuration-snippet: "proxy_set_header Authorization $http_authorization;"
  dex:
    enabled: true
    path: "/dex/(.*)"
    pathType: "Prefix"
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/use-regex: "true"
      nginx.ingress.kubernetes.io/configuration-snippet: "proxy_set_header Authorization $http_authorization;"
